Title: Final system setup
Links: links.h install-links.h

<h3>Final system set-up</h3>

    Congratulations!  You've installed the Mailman software.  To get
    everything running you need to hook Mailman up to both your web
    server and your mail system.

    <ul><p><li>If there is a <tt>README.<em>yourMTA</em>></tt> file
      that describes your mail
      server (MTA), read it now.  Some MTAs are more compatible with
      Mailman such that you can do automatic creation and removal of
      mailing lists, including through-the-web operations.  Examples
      are Exim and Postfix.  Setup instructions for specific MTAs are
      contained in these README files.

    <p><li>If you plan on running your MTA and web server on different
        machines, sharing Mailman installations via NFS, be sure that
        the clocks on those two machines are synchronized closely.
        You might take a look at the file
        <code>Mailman/LockFile.py</code>; the constant
        <code>CLOCK_SLOP</code> helps the locking mechanism compensate
        for clock skew in this type of environment.

    <p><li>Configure your web server to give <code>$prefix/cgi-bin</code>
        permission to run CGI scripts.  You probably need to be <b>root</b>
        to do this.

        <p>The line you should add might look something like one of
        the following (with the real absolute directory substituted
        for <code>$prefix</code>, of course), depending on your web
        server:

<blockquote>
<pre>
ScriptAlias   /mailman/       $prefix/cgi-bin/
Exec          /mailman/*      $prefix/cgi-bin/*
</pre>
</blockquote>

        <p>Consult your web server's documentation for details.

    <p><li><b>IMPORTANT:</b> You want to be very sure that the user id
        under which your CGI scripts run is <b>not</b> in the
        <code>mailman</code> group you created above, otherwise
        private archives will be accessible to anyone.

    <p><li>Copy the Mailman, Python, and GNU logos to a location accessible
        to your web server.  E.g. with Apache, you've usually got an
        <code>icons</code> directory that you can drop the images
        into.  You want to copy
        <code>$prefix/icons/mailman.jpg</code>,
        <code>$prefix/icons/PythonPowered.png</code>, and
        <code>$prefix/icons/gnu-head-tiny.jpg</code> to this
        directory.

        <p>You then want to add a line to your
        <code>$prefix/Mailman/mm_cfg.py</code> file which sets the
        base URL for the logos.  For example:

<blockquote>
<pre>
IMAGE_LOGOS = '/images/'
</pre>
</blockquote>

        <p>The default value for <code>IMAGE_LOGOS</code> is
        <code>/icons/</code>.  Read the
        comment in <code>Defaults.py.in</code> for details.

    <p><li>Configure your web server to point to the Pipermail public
        mailing list archives:

        For example, in Apache:

<blockquote>
<pre>
Alias /pipermail/ $varprefix/archives/public/
</pre>
</blockquote>

        <p>where <code>$varprefix</code> is usually
        <code>$prefix</code> unless you've used the 
        <code>--with-var-prefix</code> option to configure.

        <p>Consult your web server's documentation for details.  Also
        be sure to configure your web server to follow symbolic links
        in this directory, otherwise public Pipermail archives won't
        be accessible.  For Apache users, consult the
        <em>FollowSymLinks</em> option.

        <p>Now restart your web server.

    <p><li>Set up the crontab entries.  Mailman runs a number of cron jobs
      for its basic functionality.  In version of Mailman prior to
      2.1alpha2, setting up your crontab was imperative to getting
      Mailman to work.  With MM2.1alpha2 though, the qrunner is
      started from the <tt>bin/mailmanctl</tt> script (see below)
      instead of cron.  You still want to set up crontab to run the
      ancillary scripts, but it isn't as crucial to getting Mailman
      working as it once was.  Note that if you're upgrading from a
      previous version of Mailman, you'll want to install the new
      crontab, but be careful if you're running multiple Mailman
      installations on your site!  Changing the crontab could mess
      with other parallel Mailman installations.

      <p>If your version of crontab supports the -u option, you must be
      root to do this next step.  Add $prefix/cron/crontab.in as a
      crontab entry by executing these commands:

<blockquote>
<pre>
% cd $prefix/cron
% crontab -u mailman crontab.in
</pre>
</blockquote>

      <p>If you used the <tt>--with-ownername</tt> option, use that
      user name instead of mailman for the <tt>-u</tt> argument value.
      If your crontab does not support the <tt>-u</tt> option, try these
      commands:

<blockquote>
<pre>
% su - mailman
% cd $prefix/cron
% crontab crontab.in
</pre>
</blockquote>

    <p><li>Start the Mailman qrunner daemon, by executing the following
      from the <tt>$prefix</tt> directory:

<blockquote>
<pre>
% bin/mailmanctl start
</pre>
</blockquote>

      You can use the mailmanctl script as a typical Unix init
      script.  <strong>BAW: add more here.</strong>

    <p><li>Add aliases for <code>mailman</code> and
        <code>mailman-owner</code> to the system's mail alias
        database.  These aliases should point to whoever is ultimately
        responsible for the Mailman installation.  Here are
        instructions for those running Sendmail:

        <ol>
        <li>su to root.
        <li>Assuming your email is <code>fred@flintstone.com</code>,
            add the following lines to the file
            <code>/etc/aliases</code>:

<blockquote>
<pre>
mailman: fred@flintstone.com
mailman-owner: mailman
</pre>
</blockquote>

        <li>Some versions of sendmail require you to run the program
           <code>newaliases</code> explicitly.
        </ol>

        <p>If you don't run sendmail, consult the documentation of
        your mail transport program for information on adding these
        aliases.
    </ul>
